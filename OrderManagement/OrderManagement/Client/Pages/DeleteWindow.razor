@page "/deletewindow/{Id}"
@using OrderManagement.Shared

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<h3>Delete a Window</h3>
@if(window != null)
{
<p>Are you sure you want to delete Window: <b>@Id</b></p>
<div class="row">
    <div class="col-md-4">
        <table class="table">
            <tr>
                <td>Id</td>
                <td>@window.Id</td>
            </tr>
           <tr>
               <td>Name</td>
               <td>@window.Name</td>
           </tr>
           <tr>
                <td>Quantity</td>
               <td>@window.Quantity</td>
           </tr>
        </table>
    </div>
</div>    
}
<div class="row">
    <div class="col-md-4">
        <div class="form-group">
            <input type="button" class="btn btn-danger" @onclick="@Delete" value="Delete" />
            <input type="button" class="btn" @onclick="@Cancel" value="Cancel" />
            <input type="hidden" @bind="@Id" />
        </div>
    </div>
</div>
@code {
    [Parameter]
    public string Id{ get; set; }

    WindowViewModel window = new WindowViewModel();
    protected override async Task OnInitializedAsync()
    {
        //window = await Http.GetFromJsonAsync<WindowViewModel>("api/window/" + Id);
    }
    protected async Task Delete()
    {
        var response = await Http.DeleteAsync("api/Window/" + Id);
        bool deleteResponse = await response.Content.ReadFromJsonAsync<bool>();
        if (deleteResponse)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Deleted Successfully!");
            NavigationManager.NavigateTo("orderlist");
        }
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("orderlist");
    }
}
